#!/bin/rc -e

#
# trap
#

fn sigexit {
	@{ cd workdir
	$SU umount ./dev
	$SU umount ./proc
	$SU umount ./sys } >[2]/dev/null ||;
}

#
# io routines
#

# $* : msg
fn die {
	echo $progname : '<error>' $* >[1=2]
	exit 1
}

# $* : msg
fn msg {
	echo $progname : '<message>' $*
}

#
# fetch routines
#

# $1 : url
fn fetch {
	if (! test -e `{basename $1}) $FETCH $1
}

# $1 : url
fn gitclone {
	if (! test -e `{basename $1 .git}) git clone $1
}

#
# misc routines
#

# $1 : tool
fn search {
	@{ for (p in $path) if (test -f $p/$1) exit 0 } ||;
}

# $1 : tool
fn searchfail {
	search $1 || die $1: not found
}

# $* : tool, args
fn trydep {
	@{ for (tool in $*) {
		args=`{echo $tool}
		search $args && {
			echo $args
			exit 0
		}
	}} || die '"'$*'"' : not found
}

#
# main
#

progname=`{basename $0}
SU=`{trydep 'doas' 'sudo' 'su -c'}
m=`{$SU /bin/sh -c 'umask' | sed 's;^0*;;g'}
if (! ~ $m 22) die $SU umask must be 022

HOSTARCH=`{uname -m}
tolower=`{trydep 'awk {print(tolower($0))}' 'tr [A-Z] [a-z]'}
HOSTOS=`{uname -s | $tolower}
FETCH=`{trydep 'curl -LO' 'wget'}
UNGZ=`{trydep 'pigz -dc' 'gzip -dc'}
UNLZ=`{trydep 'lzip -dc' 'clzip -dc' 'pdlzip -dc'}
UNTAR=`{trydep 'pax -r' 'tar -x' 'bsdtar -x'}
UNBZ2=`{trydep 'bzip2 -dc'}

searchfail git
searchfail make

msg preparing temporary build environment
pwd=`{pwd}
destdir=$"pwd/workdir
@{ cd workdir
# ports
gitclone https://git.eltan.in.net/ports
@{ cd ports/pkg
gitclone https://git.eltan.in.net/posix-repo
gitclone https://git.eltan.in.net/linux-repo }
# ports config
file=$HOSTARCH-linux-musl-native
tmp=`{mktemp}
sed -e 's;^AR=.*;AR=/'$"file'/bin/ar;g' \
    -e 's;^CC=.*;CC=(/'$"file'/bin/gcc -static);g' \
    -e 's;^RANLIB=.*;RANLIB=/'$"file'/bin/ranlib;g' \
    -e 's;^STRIP=.*;STRIP=/'$"file'/bin/strip;g' ports/mk/config.rc > $tmp
mv $tmp ports/mk/config.rc
# compiler
file=$file.tgz
fetch http://musl.cc/$file
$UNGZ $file | $UNTAR
$SU mkdir -p mnt/var/pkg/local
echo 'version:git-0b06402' | $SU tee mnt/var/pkg/local/libc-dev
# build core
file=buildcore-$HOSTARCH.tar.lz
fetch http://downloads.eltan.in.net/files/buildcore/$HOSTOS/$file
$UNLZ $file | $UNTAR
mkdir -p etc/ssl/certs
cp /etc/ssl/certs/ca-certificates.crt etc/ssl/certs }

# install kernel headers
@{ tmpdir=`{mktemp -d}
cd $tmpdir
gitclone https://github.com/sabotage-linux/kernel-headers
@{ cd kernel-headers
make ARCH'='$HOSTARCH prefix'='/ DESTDIR'='$destdir install }
rm -Rf $tmpdir }

msg building glacies
@{ cd workdir
mkdir dev proc sys tmp
$SU mount -t proc none proc
$SU mount -o bind /sys sys
$SU mount -o bind /dev dev }

$SU env PATH'='/bin chroot workdir /bin/rc <<EOF
	@{ cd mnt
	mkdir bin boot dev etc home include lib libexec \
	      media mnt opt proc share run src srv sys var
	mkdir -m 0750 root
	mkdir -m 1777 tmp
	@{ cd var
	mkdir db empty lib lock log pkg run spool }
	@{ cd var/pkg
	mkdir cache local remote }
	ln -s . usr
	ln -s bin sbin
	ln -s dash bin/sh
	# copy base files
	pigz -dc ../opt/base.tgz | pax -r
	chmod 0600 etc/shadow
	chmod +t etc/perp/* }
	PORTS='/ports/'
	# bootstrap ports
	@{ cd /ports/mk/bin/code
	./bootstrap.rc }
	/ports/mk/portsys.rc install -BMu -e / -r /mnt `{cat '/pkgset'}
	printf 'arch:%s\n' $HOSTARCH >> mnt/etc/venus.conf
	cp -R bin/glacies-install.rc mnt/bin
EOF

msg finishing glacies build
$SU env PATH'='/bin chroot workdir/mnt glacies-install.rc

msg done
