#!/bin/rc -e

#
# trap
#

fn sigexit {
	@{ mount workdir/mnt/dev
	mount workdir/mnt/proc
	mount workdir/mnt/sys } || true
}

#
# io routines
#

# $* : msg
fn die {
	echo $progname : '<error>' $* >[1=2]
	exit 1
}

# $* : msg
fn msg {
	echo $progname : '<message>' $*
}

#
# fetch routines
#

# $1 : url
fn fetch {
	if (! test -e `{basename $1}) $FETCH $1
}

# $1 : url
fn gitclone {
	if (! test -e `{basename $1 .git}) git clone $1
}

#
# misc routines
#

# $1 : tool
fn search {
	@{ for (p in $path) if (test -f $"p/$1) exit 0 }
}

# $1 : tool
fn searchfail {
	search $1 || die $1: not found
}

# $* : tool, args
fn trydep {
	@{ for (tool in $*) {
		args=`{echo $tool}
		search $args && {
			echo $args
			exit 0
		}
		tools=' '^$args(1)
	}}
	if (! ~ $status 0) die '"'$*'"' : not found
}

#
# main
#

progname=`{basename $0}
SU=`{trydep 'doas' 'sudo' 'su -c'}
m=`{$SU /bin/rc -c 'umask'}
if (! ~ $m 022 && ! ~ $m 22) die $SU umask must be 022

HOSTARCH=`{uname -m}
tolower=`{trydep 'awk {print(tolower($0))}' 'tr [A-Z] [a-z]'}
HOSTOS=`{uname -s | $tolower}
FETCH=`{trydep 'curl -LO' 'wget'}
UNGZ=`{trydep 'pigz -dc' 'gzip -dc'}
UNLZ=`{trydep 'lzip -dc' 'clzip -dc' 'pdlzip -dc'}
UNTAR=`{trydep 'pax -r' 'tar -x' 'bsdtar -x'}
UNBZ2=`{trydep 'bzip2 -dc'}

searchfail git
searchfail make

msg preparing temporary build environment
pwd=`{pwd}
destdir=$"pwd'/workdir'
@{ cd workdir
# ports
gitclone https://git.tuxfamily.org/eltaninos/ports.git
tmp=`{mktemp}
sed -e 's;^AR=.*;AR=/ellcc/bin/ecc-ar;g' \
    -e 's;^CC=.*;CC=/ellcc/bin/ecc;g' \
    -e 's;^CXX=.*;CXX=/ellcc/bin/ecc++;g' \
    -e 's;^RANLIB=.*;RANLIB=/ellcc/bin/ecc-ranlib;g' \
    -e 's;^STRIP=.*;STRIP=/ellcc/bin/ecc-strip;g' ports/mk/config.rc > $tmp
mv $tmp ports/mk/config.rc
# ellcc
file='ellcc-'$"HOSTARCH'-linux-2017-08-23.bz2'
fetch http://ellcc.org/releases/latest/$file
@{ $UNBZ2 $"file | $UNTAR } || true # false bzip2 error
mkdir -p mnt/var/pkg/local
dest='mnt/var/pkg/local/libc-dev'
awk '{ print "version:" $2 "-" $1 }' ellcc/libecc/patches/musl.revision > $dest
# root
file='root-'$"HOSTARCH'.tar.lz'
fetch https://downloads.eltan.in.net/files/root/$HOSTOS/$file
$UNLZ $file | $UNTAR
mkdir -p etc/ssl/certs
cp /etc/ssl/certs/ca-certificates.crt etc/ssl/certs }

tmpdir=`{mktemp -d}
@{ cd $tmpdir
gitclone https://github.com/sabotage-linux/kernel-headers
@{ cd kernel-headers
make ARCH'='$HOSTARCH prefix'='/ DESTDIR'='$destdir install } }
rm -Rf $tmpdir

msg building glacies
@{ cd workdir
mkdir dev proc sys tmp
$SU mount -t proc none proc
$SU mount -o bind /sys sys
$SU mount -o bind /dev dev }

$SU env PATH'='/bin chroot workdir /bin/rc <<EOF
	@{ cd mnt
	mkdir bin boot dev etc home include lib libexec \
	      media mnt opt proc share run src srv sys var
	mkdir -m 0750 root
	mkdir -m 1777 tmp
	@{ cd var
	mkdir empty lib lock log pkg run spool }
	@{ cd var/pkg
	mkdir cache local remote }
	ln -s . usr
	ln -s bin sbin
	ln -s dash bin/sh
	chmod 0600 etc/shadow }
	PORTS='/ports/'
	/ports/mk/portsys.rc install -e / -r /mnt `{cat '/pkgset'}
	cp -R root/* mnt
	printf 'arch:%s\n' `{uname -m} >> mnt/etc/venus.conf
	cp -R bin/glacies-install.rc mnt/bin
EOF

msg finishing glacies build
@{ cd workdir
$SU umount dev proc sys
cd mnt
$SU env PATH'='/bin chroot . glacies-install.rc }

msg done
