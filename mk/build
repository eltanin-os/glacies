#!/bin/execlineb -P
backtick GLACIES_PACKAGES { cat mk/packages }
backtick HOSTARCH { uname -m }
envfile mk/env.conf
multisubstitute {
	importas -iu DEFAULT_PATH DEFAULT_PATH
	importas -iu HOSTARCH HOSTARCH
	importas -isu FETCH FETCH
	importas -isu GLACIES_PACKAGES GLACIES_PACKAGES
	importas -isu SU SU
	importas -isu UNBZ2 UNBZ2
	importas -isu UNLZ UNLZ
	importas -ius UNTAR UNTAR
}
if {
	backtick -Ex mask { sh -c "umask" }
	case -- $mask { "[0]+22" { exit 0 } }
	fdmove 1 2
	foreground { echo "${SU}: umask must be 022" }
	exit 1
}
if {
	cd build
	# prepare compiler
	if { git clone https://git.eltaninos.org/arbor }
	if { $FETCH http://ellcc.org/releases/latest/ellcc-${HOSTARCH}-linux-2017-08-23.bz2 } # XXX
	if { pipeline { $UNBZ2 ellcc-${HOSTARCH}-linux-2017-08-23.bz2 } $UNTAR }
	getcwd PWD
	multisubstitute {
		importas -i PWD PWD
		importas -i PATH PATH
	}
	# build kernel headers
	if {
		if { git clone https://github.com/sabotage-linux/kernel-headers }
		cd kernel-headers
		make ARCH=$HOSTARCH prefix=/ DESTDIR=$PWD install
	}
	# build chroot environment
	export ARBOR "${PWD}/arbor"
	export PATH "${PWD}/ellcc/bin:${PATH}"
	if {
		cd arbor
		if {
			redirfd -w 1 config/defaults.tmp
			sed -e "s;^ARBOR_AR=.*;ARBOR_AR=ecc-ar;"
			    -e "s;^AS=.*;AS=ecc-as;"
			    -e "s;^CC=.*;CC=ecc;"
			    -e "s;^LD=.*;LD=ecc-ld;"
			    -e "s;^LDFLAGS=.*;LDFLAGS=-static;"
			    -e "s;^RANLIB=.*;RANLIB=ecc-ranlib;"
			    -e "s;^STRIP=.*;STRIP=ecc-strip;"
			    config/defaults
		}
		if { mv config/defaults.tmp config/defaults }
		bin/arbor -b stdenv curl
	}
	if {
		find arbor ! -type d -name "*.pkg" -exec
		    define pkg "{}"
		    if { pipeline { $UNLZ {} } venus-ar -x }
		    rm -f $pkg
		    ;
	}
	# prepare to chroot
	if { mkdir -p dev sys proc tmp etc/ssl/certs }
	if { ln -s . usr }
	if { ln -s bin sbin }
	if {
		cd etc
		if { mkdir -p ssl/certs }
		if { cp /etc/ssl/certs/ca-certificates.crt ssl/certs }
		touch fstab group passwd
	}
	cd arbor
	if { git checkout config/defaults }
	if {
		redirfd -w 1 config/defaults.tmp
		sed -e "s;^LDFLAGS=.*;LDFLAGS=-static;"
		    -e "s;^DEFLATE=.*;DEFLATE=lzip -0;"
		config/defaults
	}
	mv config/defaults.tmp config/defaults
}
$SU if {
	cd build
	# prepare store
	if { mkdir -p venus-store }
	if { git clone https://git.eltaninos.org/venus }
	if { cp -R venus/pm mnt/venus-store }
	if { cp -R ../data/venus-store mnt }
	if { mount -o bind,rw mnt/venus-store venus-store }
	if { rm venus-store/root }
	if { ln -s /mnt venus-store/root }
	# chroot
	if { mount -o bind,ro /dev dev }
	if { mount -o bind,ro /sys sys }
	if { mount -o bind,ro /proc proc }
	export PATH "${DEFAULT_PATH}"
	chroot .
	# build glacies packages
	export ARBOR "/arbor"
	if {
		cd arbor
		bin/arbor -b ${GLACIES_PACKAGES}
	}
	# install glacies
	if {
		cd mnt
		if {
			mkdir -p bin boot dev etc home include lib libexec
			mnt opt proc share run src srv sys var
		}
		if { mkdir -m 0750 root }
		if { mkdir -m 1777 tmp }
		if {
			cd var
			mkdir -p db empty lib lock log pkg run spool
		}
		if { ln -s . usr }
		if { ln -s bin sbin }
	}
	# populate store
	cd venus-store
	if { mkdir -p repo/disk }
	if {
		find -L /arbor/repo -type f -name "*.pkg" -exec
		    define pkg "{}"
		    backtick -Ex dir { dirname $pkg }
		    backtick -Ex name { venus-conf name ${dir}/package }
		    ifelse { test -h $dir } {
		    	backtick -Ex file { basename $dir }
		    	ln -s $name repo/disk/${file}
		    }
		    if { install -m 0755 ${dir}/package repo/disk/${name} }
		    backtick cksum {
		    	pipeline { venus-cksum -w $pkg }
		    	venus-conf $pkg
		    }
		    backtick version { venus-conf version ${dir}/package }
		    multisubstitute {
		    	importas -iu cksum cksum
		    	importas -iu version version
		    }
		    install -m 0755 $pkg cache/${cksum}.${name}#${version}.pkg
		    ;
	}
	if {
		pipeline {
			cd cache
			find . -type f -name "*.pkg"
		}
		redirfd -w 1 repo/disk/chksum
		sed -e "s;^\\./;;" -e "s;^\\(.\\{128\\}\\)\\.\\(.*\\);\\2:\\1;"
	}
	# install packages
	if { redo repo/update }
	if {
		redo
		    programs/glacies-etc
		    programs/glacies-setup
		    programs/glacies-scripts
		    programs/system-core
		    programs/${GLACIES_PACKAGES}
		    programs/linux
	}
	redo cache/clean
}
cd build
if { umount dev sys proc venus-store }
cd mnt
if { mount -t tmpfs tmpfs tmp }
if { mount -o bind,ro /dev dev }
if { mount -o bind,ro /sys sys }
if { mount -o bind,ro /proc proc }
if {
	export PATH "${DEFAULT_PATH}"
	chroot .
	# venus-store
	if { rm venus-store/root }
	if { ln -s .. venus-store/root }
	# certificates
	if { mkdir -p etc/ssl/certs }
	if { update-ca-certificates --fresh }
	# init
	if { s6-linux-init-maker -1c /etc/s6/current tmp/s6.tmp }
	if { rm -Rf etc/s6/current }
	if { mv tmp/s6.tmp etc/s6/current }
	if {
		elglob files "/etc/s6/current/bin/*"
		cp -PRp $files sbin
	}
	# rc
	if {
		backtick -Ex stamp { date "+%Y%m%d%H%M%S" }
		if { s6-rc-compile etc/s6/rc/compiled-${stamp} etc/s6/sv }
		ln -s compiled-${stamp} etc/s6/rc/compiled
	}
	# initramfs
	backtick -Ex version { ls lib/modules }
	mkinitramfs $version
}
umount dev sys proc
